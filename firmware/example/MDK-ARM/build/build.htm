<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\build.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\build.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sun Dec 17 21:04:42 2017
<BR><P>
<H3>Maximum Stack Usage =        172 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[24]">CEC_CAN_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32f0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f078xx.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[23]">USART3_4_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[7]">VDDIO2_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f078xx.o(.text) referenced from startup_stm32f078xx.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f078xx.o(.text)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[29]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[90]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[91]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[92]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[93]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f078xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_put
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_flush
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init_node
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[34]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>HAL_GPIO_Init</STRONG> (Thumb, 770 bytes, Stack size 32 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[37]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command_4_bit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_enable_pulse
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_handle_message
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_sof
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_transmit_data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_timeout
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_transmit_byte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[67]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[38]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>HAL_InitTick</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[3a]"></a>HAL_MspInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3f]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[3e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[41]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 678 bytes, Stack size 16 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[3b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[42]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[43]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2244 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[44]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[46]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[45]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>LCD_Clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32xx_hal_liquid_crystal.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Clear &rArr; _lcd_send_command &rArr; _lcd_send_command_4_bit &rArr; _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[49]"></a>LCD_DisplayOn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32xx_hal_liquid_crystal.o(i.LCD_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DisplayOn &rArr; _lcd_send_command &rArr; _lcd_send_command_4_bit &rArr; _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[4a]"></a>LCD_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32xx_hal_liquid_crystal.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_Init &rArr; delay_us_init &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command_4_bit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>LCD_PrintString</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32xx_hal_liquid_crystal.o(i.LCD_PrintString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_PrintString &rArr; _lcd_cursor_set &rArr; _lcd_send_command &rArr; _lcd_send_command_4_bit &rArr; _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_cursor_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>LL_GPIO_Init</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, stm32f0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[52]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[56]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[5a]"></a>LL_USART_Init</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, stm32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[7b]"></a>MX_CRC_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>MX_GPIO_Init</STRONG> (Thumb, 788 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableOverrunDetect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMADeactOnRxErr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DisableIT_CTS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[55]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[53]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[66]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; sdp_receive_data &rArr; ring_buffer_put
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_receive_data
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrorCallback
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_NE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_FE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f078xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4f]"></a>_lcd_cursor_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32xx_hal_liquid_crystal.o(i._lcd_cursor_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lcd_cursor_set &rArr; _lcd_send_command &rArr; _lcd_send_command_4_bit &rArr; _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
</UL>

<P><STRONG><a name="[70]"></a>_lcd_enable_pulse</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32xx_hal_liquid_crystal.o(i._lcd_enable_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command_4_bit
</UL>

<P><STRONG><a name="[48]"></a>_lcd_send_command</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32xx_hal_liquid_crystal.o(i._lcd_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lcd_send_command &rArr; _lcd_send_command_4_bit &rArr; _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command_4_bit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_cursor_set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[4c]"></a>_lcd_send_command_4_bit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32xx_hal_liquid_crystal.o(i._lcd_send_command_4_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lcd_send_command_4_bit &rArr; _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_enable_pulse
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_data
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[50]"></a>_lcd_send_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32xx_hal_liquid_crystal.o(i._lcd_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lcd_send_data &rArr; _lcd_send_command_4_bit &rArr; _lcd_enable_pulse &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_send_command_4_bit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
</UL>

<P><STRONG><a name="[36]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[4d]"></a>delay_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32xx_hal_delay_us.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_enable_pulse
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[4b]"></a>delay_us_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32xx_hal_delay_us.o(i.delay_us_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = delay_us_init &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init_node
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2f]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[7e]"></a>ring_buffer_flush</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ring_buffer.o(i.ring_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ring_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_reset_node
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_receive_data
</UL>

<P><STRONG><a name="[83]"></a>ring_buffer_free_elements</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ring_buffer.o(i.ring_buffer_free_elements))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_put
</UL>

<P><STRONG><a name="[77]"></a>ring_buffer_get</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ring_buffer.o(i.ring_buffer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ring_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_size
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_sof
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_ack
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_eof
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_new_data
</UL>

<P><STRONG><a name="[81]"></a>ring_buffer_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ring_buffer.o(i.ring_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ring_buffer_init &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init_node
</UL>

<P><STRONG><a name="[82]"></a>ring_buffer_put</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ring_buffer.o(i.ring_buffer_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ring_buffer_put
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_free_elements
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_receive_data
</UL>

<P><STRONG><a name="[7f]"></a>ring_buffer_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ring_buffer.o(i.ring_buffer_size))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
</UL>

<P><STRONG><a name="[72]"></a>sdp_debug</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdp_user.o(i.sdp_debug))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_receive_data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_init_node
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_handle_message
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_transmit_data
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_timeout
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compose_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_eof
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_new_data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_crc_bytes
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_response
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_transmit_byte
</UL>

<P><STRONG><a name="[75]"></a>sdp_handle_message</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sdp.o(i.sdp_handle_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sdp_handle_message &rArr; sdp_user_handle_message &rArr; sdp_send_response &rArr; compose_frame &rArr; append_crc_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_response
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_handle_message
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_new_data
</UL>

<P><STRONG><a name="[7c]"></a>sdp_init_node</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, sdp.o(i.sdp_init_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sdp_init_node &rArr; ring_buffer_init &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>sdp_parse_rx_data</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sdp.o(i.sdp_parse_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sdp_parse_rx_data &rArr; append_new_data &rArr; sdp_handle_message &rArr; sdp_user_handle_message &rArr; sdp_send_response &rArr; compose_frame &rArr; append_crc_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_size
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_sof
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_ack
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_frame_timeout
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_eof
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_new_data
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>sdp_receive_data</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdp.o(i.sdp_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdp_receive_data &rArr; ring_buffer_put
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_put
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_flush
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_receive_byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>sdp_reset_node</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sdp.o(i.sdp_reset_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdp_reset_node &rArr; ring_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrorCallback
</UL>

<P><STRONG><a name="[86]"></a>sdp_send_response</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sdp.o(i.sdp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sdp_send_response &rArr; compose_frame &rArr; append_crc_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_transmit_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compose_frame
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_handle_message
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_handle_message
</UL>

<P><STRONG><a name="[79]"></a>sdp_user_calculate_crc</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, sdp_user.o(i.sdp_user_calculate_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdp_user_calculate_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_FeedData8
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CRC_FeedData16
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compose_frame
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rx_message
</UL>

<P><STRONG><a name="[85]"></a>sdp_user_handle_message</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdp_user.o(i.sdp_user_handle_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sdp_user_handle_message &rArr; sdp_send_response &rArr; compose_frame &rArr; append_crc_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_response
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_handle_message
</UL>

<P><STRONG><a name="[89]"></a>sdp_user_receive_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdp_user.o(i.sdp_user_receive_byte))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_receive_data
</UL>

<P><STRONG><a name="[8b]"></a>sdp_user_transmit_byte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sdp_user.o(i.sdp_user_transmit_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdp_user_transmit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_transmit_data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>LL_CRC_FeedData16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdp_user.o(i.LL_CRC_FeedData16))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_calculate_crc
</UL>

<P><STRONG><a name="[8c]"></a>LL_CRC_FeedData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdp_user.o(i.LL_CRC_FeedData8))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_calculate_crc
</UL>

<P><STRONG><a name="[71]"></a>append_crc_bytes</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, sdp.o(i.append_crc_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = append_crc_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compose_frame
</UL>

<P><STRONG><a name="[73]"></a>append_new_data</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, sdp.o(i.append_new_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = append_new_data &rArr; sdp_handle_message &rArr; sdp_user_handle_message &rArr; sdp_send_response &rArr; compose_frame &rArr; append_crc_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_handle_message
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_put
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rx_message
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
</UL>

<P><STRONG><a name="[78]"></a>check_if_eof</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sdp.o(i.check_if_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_if_eof &rArr; ring_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_put
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
</UL>

<P><STRONG><a name="[74]"></a>check_rx_message</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sdp.o(i.check_rx_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = check_rx_message &rArr; sdp_user_calculate_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_calculate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_new_data
</UL>

<P><STRONG><a name="[7a]"></a>compose_frame</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, sdp.o(i.compose_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = compose_frame &rArr; append_crc_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_crc_bytes
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_calculate_crc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_response
</UL>

<P><STRONG><a name="[76]"></a>rx_data_put</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sdp.o(i.rx_data_put))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_eof
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_new_data
</UL>

<P><STRONG><a name="[84]"></a>rx_frame_timeout</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sdp.o(i.rx_frame_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_frame_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
</UL>

<P><STRONG><a name="[8a]"></a>sdp_transmit_data</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sdp.o(i.sdp_transmit_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdp_transmit_data &rArr; sdp_user_transmit_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_user_transmit_byte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_send_response
</UL>

<P><STRONG><a name="[88]"></a>search_for_ack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sdp.o(i.search_for_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = search_for_ack &rArr; ring_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
</UL>

<P><STRONG><a name="[87]"></a>search_for_sof</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sdp.o(i.search_for_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = search_for_sof &rArr; ring_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_parse_rx_data
</UL>

<P><STRONG><a name="[40]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[5b]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_usart.o(i.LL_USART_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[5c]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32f0xx_ll_usart.o(i.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_USART_SetBaudRate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[57]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[58]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[59]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[6b]"></a>LL_USART_IsActiveFlag_FE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.LL_USART_IsActiveFlag_FE))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrorCallback
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>LL_USART_IsActiveFlag_NE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.LL_USART_IsActiveFlag_NE))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrorCallback
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>LL_USART_IsActiveFlag_ORE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.LL_USART_IsActiveFlag_ORE))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrorCallback
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>UART_ErrorCallback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_ErrorCallback &rArr; sdp_reset_node &rArr; ring_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdp_reset_node
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_ORE
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_NE
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_FE
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.LL_USART_ConfigAsyncMode))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[61]"></a>LL_USART_DisableIT_CTS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(i.LL_USART_DisableIT_CTS))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[65]"></a>LL_USART_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(i.LL_USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[63]"></a>LL_USART_EnableDMADeactOnRxErr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(i.LL_USART_EnableDMADeactOnRxErr))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[62]"></a>LL_USART_EnableOverrunDetect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(i.LL_USART_EnableOverrunDetect))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[60]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[5f]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
